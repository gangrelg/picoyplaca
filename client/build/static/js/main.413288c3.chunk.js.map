{"version":3,"sources":["components/navbar.js","components/form.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["_Navbar","Navbar","bg","variant","Brand","alt","src","width","height","className","_Form","useState","plate","setPlate","Date","startDate","setStartDate","moment","time","setTime","loading","setLoading","Form","Row","Col","Label","Control","placeholder","maxLength","onChange","val","target","value","selected","date","filterDate","day","getDay","defaultValue","showHour","format","showSecond","showMinute","Button","onClick","formattedTime","formattedDate","length","test","fetch","process","then","res","json","data","msg","alert","catch","err","disabled","Footer","class","href","App","Container","sm","Card","Img","Body","Title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.413288c3.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nexport default function _Navbar() {\r\n  return (\r\n    <Fragment>\r\n      <Navbar bg='dark' variant='dark'>\r\n        <Navbar.Brand>\r\n          <img\r\n            alt=''\r\n            src='/logo.svg'\r\n            width='30'\r\n            height='30'\r\n            className='d-inline-block align-top'\r\n          />{' '}\r\n          Municipio de Quito\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment, useState } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport moment from 'moment';\r\nimport TimePicker from 'rc-time-picker';\r\nimport 'rc-time-picker/assets/index.css';\r\n\r\nexport default function _Form() {\r\n  const api = process.env.REACT_APP_API_URL;\r\n\r\n  const [plate, setPlate] = useState('');\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [time, setTime] = useState(moment());\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const format = 'HH:mm';\r\n  const isWeekday = (date) => {\r\n    const _date = new Date(date);\r\n    const day = _date.getDay();\r\n    return day !== 0 && day !== 6;\r\n  };\r\n\r\n  function handleTime(value) {\r\n    setTime(value);\r\n  }\r\n\r\n  function validateData() {\r\n    if (\r\n      plate.length >= 6 &&\r\n      plate.length <= 7 &&\r\n      /^[A-Za-z]{3,3}[0-9]{3,4}$/.test(plate) == true\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const submitData = () => {\r\n    setLoading(true);\r\n    const formattedTime = time.format('HH:mm');\r\n    const formattedDate = moment(startDate).format('MM/DD/YYYY');\r\n    if (validateData()) {\r\n      fetch(\r\n        `${api}/?plate=${plate}&date=${formattedDate}&time=${formattedTime}`\r\n      )\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          if (data.msg === 1) {\r\n            alert('Usted puede circular');\r\n          } else {\r\n            alert('Usted no puede circular');\r\n          }\r\n          setLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          alert('Ha ocurrido un error inesperado');\r\n          setLoading(false);\r\n        });\r\n    } else {\r\n      alert('Uno o mas datos son incorrectos');\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Label>Placa</Form.Label>\r\n            <Form.Control\r\n              placeholder='AAA5451'\r\n              maxLength={7}\r\n              onChange={(val) => setPlate(val.target.value)}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Fecha</Form.Label>\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              filterDate={isWeekday}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Form.Label>Hora</Form.Label>\r\n            <TimePicker\r\n              defaultValue={time}\r\n              value={time}\r\n              showHour={false}\r\n              onChange={(val) => handleTime(val)}\r\n              format={format}\r\n              showSecond={false}\r\n              showMinute={true}\r\n              showHour={true}\r\n            />\r\n          </Col>\r\n        </Form.Row>\r\n        <Button\r\n          variant='success'\r\n          onClick={submitData}\r\n          disabled={loading === true ? true : false}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <Fragment>\r\n      <footer class='footer'>\r\n        <div class='container'>\r\n          <span class='text-muted'>\r\n            Developed by:\r\n            <a href='https://github.com/gangrelg/picoyplaca' target='_blank'>\r\n              @gangrelg\r\n            </a>\r\n          </span>\r\n        </div>\r\n      </footer>\r\n    </Fragment>\r\n  );\r\n}\r\n","import React, { Fragment } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Navbar from './components/navbar';\nimport Form from './components/form';\nimport Footer from './components/footer';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Fragment>\n      <Navbar />\n      <Container className='main-container'>\n        <Row className='form-row'>\n          <Col sm={8}>\n            <Card>\n              <Card.Img variant='top' src='/logows.png' />\n              <Card.Body>\n                <Card.Title>Ingrese los datos solicitados</Card.Title>\n                <Form />\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n      <Footer />\n    </Fragment>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}